{"version":3,"sources":["api/request.ts","api/index.ts","components/loaders/DottedSpinner.tsx","functions/index.ts","components/modals/Country.tsx","components/modals/CountryList.tsx","components/modals/SelectCountryModal.tsx","components/CountryInformation.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createBasicRequest","service","http","XMLHttpRequest","open","setRequestHeader","sendRequest","body","Promise","resolve","reject","onreadystatechange","readyState","DONE","status","response","error","this","send","getCurrentDate","date","Date","getUTCFullYear","getUTCMonth","getUTCDay","getUTCHours","getUTCMinutes","getUTCSeconds","parseResponse","r","includes","DottedSpinner","props","className","size","loading","color","css","getCurrentCountry","sessionStorage","getItem","Country","useState","selected","setSelected","onClick","countryName","country","ISO2","setItem","JSON","stringify","setCountrySelected","changeView","alt","toLowerCase","src","CountryList","countries","map","idx","closeModal","key","SelectCountryModal","state","handleCountryClick","e","isValid","f","b","t","a","parseInt","validateDate","str","split","length","ok","errorMessage","validateHour","setFromDate","ret","target","value","setState","fromDate","setToDate","toDate","setFromHours","fromHour","setToHours","toHour","filterCountry","countryFilteredList","filter","selectTimeView","selectCountryView","stateToSearch","show","onHideModal","setSelectedTime","setActualState","stateOptions","label","Modal","onHide","animation","backdrop","centered","Header","closeButton","style","fill","Body","type","placeholder","onChange","onBlur","classNamePrefix","defaultValue","name","options","from","to","Component","CountryInformation","currentCountry","currentCountryInfo","countryStats","isLoading","dataStats","selectedCountry","time","actualState","then","res","console","log","parse","catch","getByCountry","Slug","undefined","forEach","Cases","push","x","y","Fragment","data","id","margin","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","Main","showCountryModal","actualCountry","countrySelection","dateSelected","timers","sort","window","onbeforeunload","clear","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fd9eae84.chunk.js","sourcesContent":["const HEAD_CONTENT = 'Content-Type';\r\nconst HEAD_ACCEPT = 'Accept';\r\nconst JSON_TYPE = 'application/json';\r\nconst DOMAIN = \"https://api.covid19api.com/\";\r\n\r\nexport function createBasicRequest(service : string){\r\n    const http = new XMLHttpRequest();\r\n    http.open(\"GET\", `${DOMAIN}${service}`);\r\n    http.setRequestHeader(HEAD_CONTENT, JSON_TYPE);\r\n    http.setRequestHeader(HEAD_ACCEPT, JSON_TYPE);\r\n    return http;\r\n}\r\n\r\nexport function sendRequest(http : XMLHttpRequest, body : string){\r\n    return new Promise((resolve, reject) => {\r\n        http.onreadystatechange = function() {\r\n            if (http.readyState === XMLHttpRequest.DONE) {\r\n                if (http.status === 200) {\r\n                    resolve(http.response);\r\n                } else {\r\n                    reject({ error: `API ERROR: ${this.status}` });\r\n                }\r\n            }\r\n        };\r\n        http.send(body);\r\n    });\r\n}\r\n\r\n\r\n","import {createBasicRequest, sendRequest} from \"./request\";\r\n\r\nexport function getDefault() : Promise<any>{\r\n    return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(\"\"),\"\")\r\n        .then((res) => { \r\n            console.log(res);\r\n            resolve(res);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport function getSummary() : Promise<any>{\r\n    return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(\"summary\"), \"\")\r\n        .then((res) => {\r\n            resolve(res);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport interface ICountry{\r\n    Country : string;\r\n    Slug : string;\r\n    ISO2 : string;\r\n}\r\n\r\nexport function getCountries() : Promise<ICountry[]>{\r\n    return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(\"countries\"), \"\")\r\n        .then((res) => {\r\n            resolve(res as ICountry[]);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport function getCurrentDate() : string {\r\n    const date : Date = new Date();\r\n    let ret : string = \"\";\r\n    ret = `${date.getUTCFullYear()}-${date.getUTCMonth()}-${date.getUTCDay()}T${date.getUTCHours()}:${date.getUTCMinutes()}:${date.getUTCSeconds()}Z`\r\n    return ret;\r\n}\r\n\r\nfunction parseResponse(r: any) : string {\r\n    return r.includes(\"Country\") ?  r as string : \"[]\";\r\n}\r\n\r\nexport function getByCountry(country : string, \r\n    from : string = '2019-12-01T00:00:00Z', \r\n    to : string  = getCurrentDate(), \r\n    status : string = \"confirmed\"\r\n    ) : Promise<any>{\r\n        return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(`country/${country}/status/${status}?from=${from}&to=${to}`), \"\")\r\n        .then((res) => {\r\n            const r = parseResponse(res);\r\n            console.log(r);\r\n            const parse = JSON.parse(r);\r\n            console.log(parse);\r\n            resolve(JSON.parse(r));\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport function getWorldWIP(from : string, to : string, status : string) : Promise<any>{\r\n        return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(`world?from=${from}&to=${to}`), \"\")\r\n        .then((res) => {\r\n            resolve(res);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport function getWorldTotal() : Promise<any>{\r\n        return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(\"world/total\"), \"\")\r\n        .then((res) => {\r\n            resolve(res);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\nexport function getWorldAllData() : Promise<any>{\r\n        return new Promise((resolve, reject) => {\r\n        sendRequest(createBasicRequest(\"all\"), \"\")\r\n        .then((res) => {\r\n            resolve(res);\r\n        })\r\n        .catch(reject);\r\n    });\r\n}\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./DottedSpinner\";\r\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\r\n\r\ninterface IProps {\r\n    loading : boolean;\r\n}\r\nconst DottedSpinner = (props : IProps) => {\r\n    return (\r\n        <div className=\"dottedSpinner\">\r\n            <ClimbingBoxLoader size={20} loading={props.loading} color={\"#6ea5ff\"} css={\"margin-top: 20rem\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DottedSpinner;","const CURRENT_COUNTRY : string = \"CURRENT_COUNTRY\";\r\nconst CURRENT_COUNTRY_INFO : string = \"CURRENT_COUNTRY_INFO\";\r\n\r\nexport function saveCurrentCountryInfo(country : any) : void {\r\n    sessionStorage.setItem(CURRENT_COUNTRY_INFO, JSON.stringify(country));\r\n}\r\nexport function getCurrentCountryInfo() : any {\r\n    sessionStorage.getItem(CURRENT_COUNTRY_INFO);\r\n}\r\nexport function saveCurrentCountry(countryName : string) : void {\r\n    sessionStorage.setItem(CURRENT_COUNTRY, countryName);\r\n}\r\n\r\nexport function getCurrentCountry() : string {\r\n    return sessionStorage.getItem(CURRENT_COUNTRY) as string;\r\n}\r\n\r\nexport function cleanSession() : void {\r\n    sessionStorage.clear();\r\n}","import React, {useState} from \"react\";\r\nimport \"./Country.scss\";\r\nimport {saveCurrentCountry, saveCurrentCountryInfo} from \"../../functions\";\r\nconst Country = (props : any) => {\r\n    const [selected, setSelected] = useState(false);\r\n    return (\r\n        <div className={`country ${selected ? \"selected\" : \"\"}`}\r\n            onClick={() => {\r\n                saveCurrentCountry(props.country.ISO2);\r\n                saveCurrentCountryInfo(props.country);\r\n                setSelected(true);\r\n                props.setCountrySelected(props.country);\r\n                props.changeView();\r\n                //props.closeModal();\r\n            }}\r\n        >\r\n            <img alt={`${props.country.ISO2.toLowerCase()}`} src={`https://www.countryFlags.io/${props.country.ISO2.toLowerCase()}/shiny/64.png`}/>\r\n            <span>{props.country.Country}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Country;","import React from \"react\";\r\nimport \"./CountryList.scss\";\r\nimport Country from \"./Country\";\r\n\r\nconst CountryList = (props : any) => {\r\n    return (\r\n        <div className=\"countryList\">\r\n            {\r\n            props.countries.map((country : any, idx : number) => { \r\n                return (\r\n                    <Country \r\n                        setCountrySelected={props.setCountrySelected}\r\n                        closeModal={props.closeModal}\r\n                        key={idx}\r\n                        country={country}\r\n                        changeView={props.changeView}\r\n                    />\r\n                );\r\n            })\r\n            }\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default CountryList;","import React, {Component} from \"react\";\r\nimport \"./SelectCountryModal.scss\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport CountryList from \"./CountryList\";\r\nimport { ICountry } from \"../../api\";\r\nimport {FaGlobeAmericas} from \"react-icons/fa\";\r\nimport Select from 'react-select';\r\n\r\ninterface IState {\r\n    countryFilteredList : ICountry[];\r\n    loading : boolean;\r\n    selectTimeView: boolean;\r\n    selectCountryView: boolean;\r\n    errorMessage: string;\r\n    fromDate: string;\r\n    fromHour: string;\r\n    toDate: string;\r\n    toHour: string;\r\n    stateToSearch: string;\r\n}\r\ninterface IProps {\r\n    show : boolean;\r\n    countries : ICountry[];\r\n    onHideModal : () => void;\r\n    setCountrySelected: (country : ICountry) => void;\r\n    setSelectedTime: (timer: any) => void;\r\n    setActualState: (value : string) => void;\r\n}\r\n\r\n\r\nclass SelectCountryModal extends Component<IProps, IState>{\r\n    state: { \r\n        countryFilteredList: ICountry[]; \r\n        errorMessage: string; \r\n        loading: boolean; \r\n        selectCountryView: boolean; \r\n        selectTimeView: boolean;\r\n        fromDate: string;\r\n        fromHour: string;\r\n        toDate: string;\r\n        toHour: string;\r\n        stateToSearch: string;\r\n    };\r\n    constructor(props : IProps){\r\n        super(props);\r\n        this.state={\r\n            countryFilteredList : props.countries,\r\n            loading : true,\r\n            selectTimeView: false,\r\n            selectCountryView: true,\r\n            errorMessage: \"\",\r\n            fromDate: \"\",\r\n            fromHour: \"\",\r\n            toDate: \"\",\r\n            toHour: \"\",\r\n            stateToSearch: \"confirmed\"\r\n        }\r\n    }\r\n\r\n    handleCountryClick = (e : any) => {\r\n\r\n    }\r\n\r\n    isValid = (f : string, b : number, t : number) : boolean => {\r\n        const a = parseInt(f);\r\n        return a >= b && a <= t;\r\n    }\r\n\r\n    validateDate = (str : string) : {ok: boolean; errorMessage: string} => {\r\n        const r = str.split(\"-\");\r\n        return (r.length === 3 && this.isValid(r[0],2019,2020) && this.isValid(r[1],1,12) && this.isValid(r[2],1,31)) ? \r\n                {ok : true, errorMessage: \"\"} : {ok: false, errorMessage: \"Error in date format\"};\r\n    }\r\n\r\n    validateHour = (str : string) : {ok: boolean; errorMessage: string} => {\r\n        const r = str.split(\":\");\r\n        return (r.length === 3 && this.isValid(r[0],0,24) && this.isValid(r[1],0,59) && this.isValid(r[2],0,59)) ? \r\n                {ok : true, errorMessage: \"\"} : {ok: false, errorMessage: \"Error in hour format\"};\r\n    }\r\n\r\n    setFromDate = (e : any) => {\r\n        const ret = this.validateDate(e.target.value);\r\n        ret.ok ? this.setState({fromDate: e.target.value}) : \r\n                 this.setState({errorMessage: ret.errorMessage});\r\n    }\r\n\r\n    setToDate = (e : any) => {\r\n        const ret = this.validateDate(e.target.value);\r\n        ret.ok ? this.setState({toDate: e.target.value}) : \r\n                 this.setState({errorMessage: ret.errorMessage});\r\n    }\r\n\r\n    setFromHours = (e : any) => {\r\n        const ret = this.validateHour(e.target.value);\r\n        ret.ok ? this.setState({fromHour: e.target.value}) : \r\n                 this.setState({errorMessage: ret.errorMessage});\r\n    }\r\n\r\n    setToHours = (e : any) => {\r\n        const ret = this.validateHour(e.target.value);\r\n        ret.ok ? this.setState({toHour: e.target.value}) : \r\n                 this.setState({errorMessage: ret.errorMessage});\r\n    }\r\n\r\n    filterCountry = (e : any) => {\r\n        const {countries} = this.props;\r\n        if(e.target.value === \"\"){\r\n            this.setState({countryFilteredList : countries});\r\n        } else {\r\n            let {countryFilteredList} = this.state;\r\n            countryFilteredList = countries.filter(\r\n                (country : ICountry) => {\r\n                    return country.Country.toLowerCase()\r\n                            .includes(e.target.value.toLowerCase()) ||\r\n                            country.ISO2.toLowerCase()\r\n                            .includes(e.target.value.toLowerCase());\r\n                }\r\n            );\r\n            this.setState({countryFilteredList});\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const { countries } = this.props;\r\n        this.setState({countryFilteredList : countries});\r\n    }\r\n\r\n    componentWillReceiveProps(){\r\n        const { countries } = this.props;\r\n        this.setState({countryFilteredList : countries});\r\n    }\r\n\r\n    render(){\r\n        const {show, \r\n            onHideModal, \r\n            setCountrySelected, \r\n            setSelectedTime,\r\n            setActualState} = this.props;\r\n        const {countryFilteredList, \r\n            selectCountryView, \r\n            selectTimeView, \r\n            errorMessage,\r\n            fromDate,\r\n            fromHour,\r\n            toDate,\r\n            toHour,\r\n            stateToSearch} = this.state;\r\n        const stateOptions = [\r\n            {value: \"confirmed\", label: \"Confirmed\"},\r\n            {value: \"recovered\", label: \"Recovered\"},\r\n            {value: \"deaths\", label: \"Deaths\"}\r\n        ];\r\n        return(\r\n            <Modal\r\n            show={show}\r\n            onHide={onHideModal} \r\n            animation\r\n            backdrop\r\n            centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <div className=\"header\">\r\n                        <FaGlobeAmericas style={{fill: \"#8c8c8c\"}}/>\r\n                        <span>Countries</span>\r\n                    </div>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    { selectCountryView && !selectTimeView &&\r\n                        <div className=\"title\">\r\n                            <span>Please select a country</span>\r\n                            <input \r\n                                type=\"text\" \r\n                                placeholder=\"Type a country name\"\r\n                                className=\"searchCountry\"\r\n                                onChange={this.filterCountry} \r\n                            />\r\n                        </div>\r\n                    }\r\n                    { selectCountryView && !selectTimeView &&\r\n                        <CountryList \r\n                            setCountrySelected={setCountrySelected}\r\n                            closeModal={onHideModal}\r\n                            countries={countryFilteredList}\r\n                            changeView={\r\n                                () =>{ this.setState({ selectCountryView: false,  selectTimeView: true});}\r\n                            }\r\n                        />\r\n                    }\r\n                    { selectTimeView && !selectCountryView && \r\n                        <div className=\"timeSelection\">\r\n                            <div className=\"fromTo\">\r\n                                <span>From</span>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    placeholder=\"Please type the desire date in the format: YEAR-MONTH-DAY\"\r\n                                    className=\"searchCountry\"\r\n                                    onBlur={this.setFromDate}\r\n                                    onChange={() => {this.setState({errorMessage: \"\"});}} \r\n                                />\r\n                                <input \r\n                                    type=\"text\" \r\n                                    placeholder=\"Please type the desire hour in the format: HOURS:MINUTES:SECONDS\"\r\n                                    className=\"searchCountry\"\r\n                                    onBlur={this.setFromHours}\r\n                                    onChange={() => {this.setState({errorMessage: \"\"});}} \r\n                                />\r\n                            </div>\r\n                            <div className=\"fromTo\">\r\n                                <span className=\"padding\">To</span>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    placeholder=\"Please type the desire date in the format: YEAR-MONTH-DAY\"\r\n                                    className=\"searchCountry\"\r\n                                    onBlur={this.setToDate}\r\n                                    onChange={() => {this.setState({errorMessage: \"\"});}}  \r\n                                />\r\n                                <input \r\n                                    type=\"text\" \r\n                                    placeholder=\"Please type the desire hour in the format: HOURS:MINUTES:SECONDS\"\r\n                                    className=\"searchCountry\"\r\n                                    onBlur={this.setToHours}\r\n                                    onChange={() => {this.setState({errorMessage: \"\"});}}  \r\n                                />\r\n                            </div>\r\n                            <div className=\"state\">\r\n                                <span>Select state to search</span>\r\n                                <Select\r\n                                    className=\"basic-single\"\r\n                                    classNamePrefix=\"select\"\r\n                                    defaultValue={stateOptions[0]}\r\n                                    name=\"State\"\r\n                                    options={stateOptions}\r\n                                    onChange={(e :any) => {\r\n                                        this.setState({stateToSearch: e.value});\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                            {errorMessage !== \"\" && \r\n                                <span className=\"errorMessage\">\r\n                                    {errorMessage}\r\n                                </span>\r\n                            }\r\n                            <button onClick={() => {\r\n                                setSelectedTime(\r\n                                    {\r\n                                        from: `${fromDate}T${fromHour}Z`,\r\n                                        to:  `${toDate}T${toHour}Z`\r\n                                    }\r\n                                );\r\n                                setActualState(stateToSearch);\r\n                            }}>\r\n                                Get Information\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                </Modal.Body>\r\n            </Modal>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default SelectCountryModal;","import React, {Component} from \"react\";\r\nimport \"./CountryInformation\";\r\nimport {getCurrentCountry, getCurrentCountryInfo} from \"../functions\";\r\nimport { ICountry, getByCountry } from \"../api\";\r\nimport DottedSpinner from \"./loaders/DottedSpinner\";\r\nimport {LineChart, XAxis, Tooltip, CartesianGrid, Line } from \"recharts\";\r\nimport { ResponsiveLine } from '@nivo/line';\r\ninterface ICountryResponse{\r\n    Country : string;\r\n    CountryCode : string;\r\n    Province: string;\r\n    City: string;\r\n    CityCode: string;\r\n    Lat: number;\r\n    Lon: number;\r\n    Cases: number;\r\n    Status: string;\r\n    Date: string;\r\n}\r\n\r\ninterface IState{\r\n    currentCountryInfo : any;\r\n    currentCountry : string;\r\n    countryStats : ICountryResponse[];\r\n    isLoading: boolean;\r\n    dataStats: {x: string, y: number}[];\r\n}\r\n\r\ninterface IProps{\r\n    selectedCountry : ICountry;\r\n    time: any;\r\n    actualState: string;\r\n}\r\n\r\nclass CountryInformation extends Component<IProps, IState> {\r\n    constructor(props : IProps){\r\n        super(props);\r\n        this.state = {\r\n            currentCountry : \"\",\r\n            currentCountryInfo: {},\r\n            countryStats: [],\r\n            isLoading: true,\r\n            dataStats: []\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const { selectedCountry, time, actualState } = this.props;\r\n        getByCountry(selectedCountry.Slug, \r\n                    time.from ? time.from : undefined, \r\n                    time.to ? time.to : undefined, \r\n                    actualState !== \"\" || actualState ? actualState : undefined)\r\n        .then((res) => {\r\n            console.log(\"res\", res);\r\n            const dataStats : {x: string, y: number}[] = [];\r\n            res.forEach((country : any) => {\r\n                console.log(country);\r\n                const a = parseInt(country.Cases);\r\n                dataStats.push(\r\n                    {\r\n                        x: country.Date,\r\n                        y: a ? a : 0\r\n                    }\r\n                );\r\n            });\r\n            console.log(dataStats);\r\n            this.setState({\r\n                currentCountry : getCurrentCountry(),\r\n                currentCountryInfo: getCurrentCountryInfo(),\r\n                countryStats: res,\r\n                dataStats : dataStats,\r\n                isLoading: false\r\n            });\r\n        });\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {isLoading, dataStats} = this.state;\r\n        const {selectedCountry} = this.props;\r\n\r\n        return(\r\n            <React.Fragment>\r\n                {!isLoading && \r\n                    <div className=\"countryInfo\">\r\n                        <div className=\"header\">\r\n                            <img alt={`${selectedCountry.ISO2.toLowerCase()}`} src={`https://www.countryFlags.io/${selectedCountry.ISO2.toLowerCase()}/shiny/64.png`}/>\r\n                        </div>\r\n                        <div className=\"body\">\r\n                            {/*<LineChart\r\n                                data={dataStats}\r\n                            >\r\n                                <XAxis dataKey=\"date\"/>\r\n                                <Tooltip/>\r\n                                <CartesianGrid stroke=\"#f5f5f5\" />\r\n                                <Line type=\"monotone\" dataKey=\"x\" stroke=\"#ff7300\" yAxisId={0} />\r\n                                <Line type=\"monotone\" dataKey=\"y\" stroke=\"#387908\" yAxisId={1} />\r\n                            </LineChart>*/}\r\n                            <ResponsiveLine\r\n                                data={[{\r\n                                    id: \"chart\",\r\n                                    color: \"hsl(326, 70%, 50%)\",\r\n                                    data: dataStats\r\n                                }]}\r\n                                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n                                xScale={{ type: 'point' }}\r\n                                yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n                                axisTop={null}\r\n                                axisRight={null}\r\n                                axisBottom={{\r\n                                    orient: 'bottom',\r\n                                    tickSize: 5,\r\n                                    tickPadding: 5,\r\n                                    tickRotation: 0,\r\n                                    legend: 'transportation',\r\n                                    legendOffset: 36,\r\n                                    legendPosition: 'middle'\r\n                                }}\r\n                                axisLeft={{\r\n                                    orient: 'left',\r\n                                    tickSize: 5,\r\n                                    tickPadding: 5,\r\n                                    tickRotation: 0,\r\n                                    legend: 'count',\r\n                                    legendOffset: -40,\r\n                                    legendPosition: 'middle'\r\n                                }}\r\n                                colors={{ scheme: 'nivo' }}\r\n                                pointSize={10}\r\n                                pointColor={{ theme: 'background' }}\r\n                                pointBorderWidth={2}\r\n                                pointBorderColor={{ from: 'serieColor' }}\r\n                                pointLabel=\"y\"\r\n                                pointLabelYOffset={-12}\r\n                                useMesh={true}\r\n                                legends={[\r\n                                    {\r\n                                        anchor: 'bottom-right',\r\n                                        direction: 'column',\r\n                                        justify: false,\r\n                                        translateX: 100,\r\n                                        translateY: 0,\r\n                                        itemsSpacing: 0,\r\n                                        itemDirection: 'left-to-right',\r\n                                        itemWidth: 80,\r\n                                        itemHeight: 20,\r\n                                        itemOpacity: 0.75,\r\n                                        symbolSize: 12,\r\n                                        symbolShape: 'circle',\r\n                                        symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                                        effects: [\r\n                                            {\r\n                                                on: 'hover',\r\n                                                style: {\r\n                                                    itemBackground: 'rgba(0, 0, 0, .03)',\r\n                                                    itemOpacity: 1\r\n                                                }\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                }\r\n                {isLoading && <DottedSpinner loading={isLoading}/>}\r\n        </React.Fragment>\r\n        );\r\n    }\r\n    \r\n}\r\n\r\nexport default CountryInformation;","import React, {Component} from \"react\";\r\nimport \"./Main.scss\";\r\nimport { getCountries, ICountry } from \"../api\";\r\nimport DottedSpinner from \"./loaders/DottedSpinner\";\r\nimport SelectCountryModal from \"./modals/SelectCountryModal\";\r\nimport {getCurrentCountry, cleanSession} from \"../functions\";\r\nimport CountryInformation from \"./CountryInformation\";\r\ninterface IState {\r\n    selectedCountry : string;\r\n    countries : ICountry[];\r\n    loading : boolean;\r\n    showCountryModal : boolean;\r\n    actualCountry : ICountry;\r\n    countrySelection: boolean;\r\n    dateSelected : boolean;\r\n    timers : any;\r\n    actualState: string;\r\n}\r\nclass Main extends Component<any, IState>{\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            selectedCountry : \"all\",\r\n            countries: [],\r\n            loading: true,\r\n            showCountryModal: false,\r\n            actualCountry : {\r\n                Country : 'Uruguay',\r\n                Slug : 'uruguay',\r\n                ISO2 : 'UY'\r\n            },\r\n            countrySelection : false,\r\n            dateSelected: false,\r\n            timers: {from: \"\", to: \"\"},\r\n            actualState: \"confirmed\" \r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        getCountries()\r\n        .then((res) => {\r\n            let data : ICountry[] = JSON.parse(res as unknown as string);\r\n            data = data.sort((a, b) => {\r\n                if(a.Slug > b.Slug) return 1;\r\n                if(a.Slug < b.Slug) return -1;\r\n                else return 0;\r\n            });\r\n            this.setState({\r\n                countries : data,\r\n                loading: false,\r\n                showCountryModal: true\r\n            });\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        const {countries, \r\n            showCountryModal, \r\n            actualCountry, \r\n            countrySelection, \r\n            dateSelected, \r\n            timers,\r\n            actualState} = this.state;\r\n        //clear session when tab is closed\r\n        window.onbeforeunload = () => {\r\n            cleanSession();\r\n        }\r\n        return(\r\n            <div className=\"main\">\r\n                <DottedSpinner loading={countries.length < 0}/>\r\n                {countries.length > 0 && showCountryModal && getCurrentCountry() !== \"\" &&\r\n                    <SelectCountryModal\r\n                     show={showCountryModal} \r\n                     countries={countries}\r\n                     setCountrySelected={(country : ICountry)=> {\r\n                        this.setState({\r\n                            actualCountry : country,\r\n                            countrySelection: true\r\n                        })\r\n                     }}\r\n                     onHideModal={() => {\r\n                         this.setState({\r\n                             showCountryModal : false\r\n                         })\r\n                     }}\r\n                     setSelectedTime={\r\n                        (timers : any) => {\r\n                            this.setState({\r\n                                timers\r\n                            });\r\n                        }\r\n                    }\r\n                    setActualState={\r\n                        (value : string) => {\r\n                            this.setState({\r\n                                actualState : value,\r\n                                showCountryModal: false,\r\n                                dateSelected: true\r\n\r\n                            });\r\n                        }\r\n                    }\r\n                    />\r\n                }\r\n                { countrySelection && dateSelected &&\r\n                    <CountryInformation \r\n                        selectedCountry={actualCountry}\r\n                        time={timers}\r\n                        actualState={actualState}\r\n                    />\r\n                }\r\n            </div>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from \"./components/Main\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}